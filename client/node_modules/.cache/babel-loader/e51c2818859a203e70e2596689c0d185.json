{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\UJJU\\\\Desktop\\\\react-project\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\UJJU\\\\Desktop\\\\react-project\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:\\\\Users\\\\UJJU\\\\Desktop\\\\react-project\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\UJJU\\\\Desktop\\\\react-project\\\\client\\\\src\\\\Main.js\";\nimport { render } from 'react-dom';\nimport React, { useState } from 'react';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport { useGesture } from 'react-with-gesture';\nimport './App.css';\nvar cards = ['https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2013/08/CircularNavigation_Demo2.png', 'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg', 'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg', 'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg']; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nvar to = function to(i) {\n  return {\n    x: 0,\n    y: i * -4,\n    scale: 1,\n    rot: -10 + Math.random() * 20,\n    delay: i * 100\n  };\n};\n\nvar from = function from(i) {\n  return _defineProperty({\n    x: 0,\n    y: i * -4,\n    rot: 0,\n    scale: 1.5\n  }, \"y\", -1000);\n}; // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nvar trans = function trans(r, s) {\n  return \"perspective(1500px) rotateX(30deg) rotateY(\".concat(r / 10, \"deg) rotateZ(\").concat(r, \"deg) scale(\").concat(s, \")\");\n};\n\nfunction Deck() {\n  var _useState = useState(function () {\n    return new Set();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      gone = _useState2[0]; // The set flags all the cards that are flicked out\n\n\n  var _useSprings = useSprings(cards.length, function (i) {\n    return _objectSpread({}, to(i), {\n      from: from(i)\n    });\n  }),\n      _useSprings2 = _slicedToArray(_useSprings, 2),\n      props = _useSprings2[0],\n      set = _useSprings2[1]; // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n\n  var bind = useGesture(function (_ref2) {\n    var _ref2$args = _slicedToArray(_ref2.args, 1),\n        index = _ref2$args[0],\n        down = _ref2.down,\n        _ref2$delta = _slicedToArray(_ref2.delta, 1),\n        xDelta = _ref2$delta[0],\n        distance = _ref2.distance,\n        _ref2$direction = _slicedToArray(_ref2.direction, 1),\n        xDir = _ref2$direction[0],\n        velocity = _ref2.velocity;\n\n    var trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    var dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(function (i) {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      var isGone = gone.has(index);\n      var x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      var rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      var scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x: x,\n        rot: rot,\n        scale: scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(function () {\n      return gone.clear() || set(function (i) {\n        return to(i);\n      });\n    }, 600);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map(function (_ref3, i) {\n    var x = _ref3.x,\n        y = _ref3.y,\n        rot = _ref3.rot,\n        scale = _ref3.scale;\n    return React.createElement(animated.div, {\n      key: i,\n      style: {\n        transform: interpolate([x, y], function (x, y) {\n          return \"translate3d(\".concat(x, \"px,\").concat(y, \"px,0)\");\n        })\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(animated.div, Object.assign({}, bind(i), {\n      style: {\n        transform: interpolate([rot, scale], trans),\n        backgroundImage: \"url(\".concat(cards[i], \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })));\n  });\n}\n\nrender(React.createElement(Deck, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:\\Users\\UJJU\\Desktop\\react-project\\client\\src\\Main.js"],"names":["render","React","useState","useSprings","animated","interpolate","useGesture","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","Set","gone","length","props","set","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage","document","getElementById"],"mappings":"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","sourcesContent":["import { render } from 'react-dom'\r\nimport React, { useState } from 'react'\r\nimport { useSprings, animated, interpolate } from 'react-spring'\r\nimport { useGesture } from 'react-with-gesture'\r\nimport './App.css'\r\n\r\nconst cards = [\r\n  'https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2013/08/CircularNavigation_Demo2.png',\r\n  'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\r\n  'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'\r\n]\r\n\r\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\r\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst from = i => ({ x: 0, y: i * -4, rot: 0, scale: 1.5, y: -1000 })\r\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\r\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nfunction Deck() {\r\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\r\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\r\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\r\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\r\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\r\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\r\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\r\n    set(i => {\r\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\r\n      const isGone = gone.has(index)\r\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\r\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\r\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\r\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\r\n    })\r\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\r\n  })\r\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\r\n  return props.map(({ x, y, rot, scale }, i) => (\r\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\r\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\r\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\r\n    </animated.div>\r\n  ))\r\n}\r\n\r\nrender(<Deck />, document.getElementById('root'))\r\n"]},"metadata":{},"sourceType":"module"}