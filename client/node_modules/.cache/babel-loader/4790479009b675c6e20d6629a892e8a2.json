{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar startListener = function startListener(getPromptMessage) {\n  var handleBeforeUnload = function handleBeforeUnload(event) {\n    var message = getPromptMessage();\n\n    if (typeof message === 'string') {\n      (event || window.event).returnValue = message;\n      return message;\n    }\n\n    return undefined;\n  };\n\n  (0, _DOMUtils.addEventListener)(window, 'beforeunload', handleBeforeUnload);\n  return function () {\n    return (0, _DOMUtils.removeEventListener)(window, 'beforeunload', handleBeforeUnload);\n  };\n};\n/**\n * Returns a new createHistory function that can be used to create\n * history objects that know how to use the beforeunload event in web\n * browsers to cancel navigation.\n */\n\n\nvar useBeforeUnload = function useBeforeUnload(createHistory) {\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'useBeforeUnload only works in DOM environments') : (0, _invariant2.default)(false) : void 0;\n  return function (options) {\n    var history = createHistory(options);\n    var listeners = [];\n    var stopListener = void 0;\n\n    var getPromptMessage = function getPromptMessage() {\n      var message = void 0;\n\n      for (var i = 0, len = listeners.length; message == null && i < len; ++i) {\n        message = listeners[i].call();\n      }\n\n      return message;\n    };\n\n    var listenBeforeUnload = function listenBeforeUnload(listener) {\n      if (listeners.push(listener) === 1) stopListener = startListener(getPromptMessage);\n      return function () {\n        listeners = listeners.filter(function (item) {\n          return item !== listener;\n        });\n\n        if (listeners.length === 0 && stopListener) {\n          stopListener();\n          stopListener = null;\n        }\n      };\n    };\n\n    return _extends({}, history, {\n      listenBeforeUnload: listenBeforeUnload\n    });\n  };\n};\n\nexports.default = useBeforeUnload;","map":null,"metadata":{},"sourceType":"script"}